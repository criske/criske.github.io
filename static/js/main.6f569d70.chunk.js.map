{"version":3,"sources":["state/State.ts","state/StateContext.tsx","components/Fetch.tsx","service/MyGitFeedService.ts","components/FetchContext.tsx","components/FetchController.tsx","components/nav/NavBar.tsx","components/nav/NavBarController.tsx","components/assignments/Assignment.tsx","components/assignments/Assignments.tsx","utils/index.ts","components/commits/Commit.tsx","components/commits/Commits.tsx","components/home/Home.tsx","components/repos/Repo.tsx","components/repos/Repos.tsx","components/nav/NavContent.tsx","components/commits/CommitsController.tsx","components/repos/ReposController.tsx","components/assignments/AssignmentsController.tsx","components/Main.tsx","components/startup/Splash.tsx","components/startup/SplashController.tsx","components/startup/StartUp.tsx","App.tsx","index.tsx"],"names":["ActionType","Pages","INITIAL_STATE","fetch","loading","call","name","args","stateActionType","NONE","ready","provider","user","avatar","link","pages","selected","home","assignments","commits","repos","StateContext","createContext","state","actions","select","dispatch","StateProvider","children","useReducer","action","type","READY","LOADING","payload","FETCH","USER","SELECTED","ASSIGNMENTS","COMMITS","REPOS","isLoading","page","fetchType","actionType","fetchArgs","Math","random","Provider","value","Error","error","onRetry","onClose","className","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","Spinner","Fetch","useState","open","setOpen","useEffect","jsonFetch","path","controller","AbortController","signal","request","headers","then","r","ok","json","e","Promise","reject","message","catch","cancel","abort","console","service","ping","FetchContext","onCancel","FetchProvider","useContext","retryCount","setRetryCount","cancelHandler","setCancelHandler","err","setErr","fetchCallNameHashed","fetchCallName","split","remoteCall","result","actionDispatchName","finally","context","FetchController","fetchContext","NavBar","hasRounter","onSelect","RouterWrap","BrowserRouter","Fragment","src","stroke","strokeLinecap","strokeLinejoin","strokeWidth","href","to","onChange","target","NavBarController","setProvider","defaultProps","Assignment","assignment","title","Assignments","map","a","i","formatDate","dateStr","Date","toLocaleString","Commit","commit","repo","sha","date","Commits","c","Home","Repo","createdAt","useMemo","updatedAt","url","language","stars","description","Repos","routes","component","location","key","entries","fullName","simple","undefined","organization","body","author","NavContent","route","exact","render","props","Main","Splash","SplashController","StartUp","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6f569d70.chunk.js","sourcesContent":["export enum ActionType {\r\n    LOADING = 'loading',\r\n    FETCH = 'fetch',\r\n    USER = 'user',\r\n    SELECTED = 'selected',\r\n    ASSIGNMENTS = 'assignments',\r\n    COMMITS = 'commits',\r\n    REPOS = 'repos',\r\n    READY = 'ready',\r\n    NONE = \"\"\r\n}\r\n\r\nexport interface Action {\r\n    type: ActionType;\r\n    payload?: any ;\r\n}\r\n\r\n\r\nexport interface FetchState {\r\n    readonly loading: boolean;\r\n    readonly call: FetchCallState;\r\n}\r\n\r\nexport interface FetchCallState {\r\n    readonly name?: string | null;\r\n    args: ReadonlyArray<string>;\r\n    readonly stateActionType: ActionType;\r\n}\r\n\r\nexport interface ProviderState {\r\n    readonly name: Provider;\r\n    readonly user: {\r\n        name: string;\r\n        avatar: string | null;\r\n        link: string,\r\n        provider: Provider\r\n    }\r\n}\r\n\r\nexport interface PagesState {\r\n    readonly selected: Pages;\r\n    readonly home: Object;\r\n    readonly assignments: any;\r\n    readonly commits: any;\r\n    readonly repos: any\r\n}\r\n\r\nexport interface State {\r\n    readonly ready: boolean;\r\n    readonly fetch: FetchState;\r\n    readonly provider: ProviderState;\r\n    readonly pages: PagesState;\r\n}\r\n\r\nexport type Provider = 'Github' | 'Gitlab' | 'Bitbucket' | 'github' | 'gitlab' | 'bitbucket';\r\n\r\nexport enum Pages {\r\n    home,\r\n    assignments,\r\n    commits,\r\n    repos,\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    fetch: {\r\n        loading: false,\r\n        call: {\r\n            name: null,\r\n            args: [],\r\n            stateActionType: ActionType.NONE  \r\n        }\r\n    },\r\n    ready: false,\r\n    provider: {\r\n        name: \"Github\",\r\n        user: {\r\n            name: '',\r\n            avatar: null,\r\n            link: '',\r\n            provider: \"Github\"\r\n        },\r\n    },\r\n    pages: {\r\n        selected: Pages.home,\r\n        home: {},\r\n        assignments: {},\r\n        commits: {},\r\n        repos: {}\r\n    }\r\n}\r\n\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { FetchTypes } from '../service/MyGitFeedService';\r\nimport { Action, ActionType, INITIAL_STATE, State, Pages } from './State';\r\n\r\ntype StateReducer = (state: State, action: Action) => State;\r\n\r\ninterface Actions {\r\n    loading: (isLoading: boolean) => void;\r\n    fetch: (fetchType: FetchTypes, actionType: ActionType, args?: [any]) => void;\r\n    select: (page: Pages) => void;\r\n    dispatch: (action: ActionType, payload: any) => void\r\n}\r\n\r\nexport interface StateContext {\r\n    state: State;\r\n    actions: Actions;\r\n}\r\n\r\nexport const StateContext = createContext<StateContext>({\r\n    state: INITIAL_STATE,\r\n    actions: {\r\n        loading: () => { },\r\n        fetch: () => { },\r\n        select: () => { },\r\n        dispatch: () => { }\r\n    }\r\n});\r\n\r\nexport const StateProvider: React.FC = ({ children }) => {\r\n\r\n    const stateReducer: StateReducer = (state, action) => {\r\n        switch (action.type) {\r\n            case ActionType.READY: {\r\n                const updated: State = { ...state, ready: true };\r\n                return updated\r\n            }\r\n            case ActionType.LOADING: {\r\n                const updated: State = { ...state, fetch: { ...state.fetch, loading: action.payload } };\r\n                return updated;\r\n            }\r\n            case ActionType.FETCH: {\r\n                const updated: State = { ...state, fetch: { ...state.fetch, call: action.payload } };\r\n                return updated\r\n            }\r\n            case ActionType.USER: {\r\n                const updated: State = {\r\n                    ...state,\r\n                    provider: {\r\n                        name: action.payload?.provider,\r\n                        user: action.payload\r\n                    }\r\n                }\r\n                return updated;\r\n            }\r\n            case ActionType.SELECTED: {\r\n                const updated: State = { ...state, pages: { ...state.pages, selected: action.payload } }\r\n                return updated;\r\n            }\r\n            case ActionType.ASSIGNMENTS: {\r\n                const updated: State = { ...state, pages: { ...state.pages, assignments: action.payload } };\r\n                return updated;\r\n            }\r\n            case ActionType.COMMITS: {\r\n                const updated: State = { ...state, pages: { ...state.pages, commits: action.payload } };\r\n                return updated;\r\n            }\r\n            case ActionType.REPOS: {\r\n                const updated: State = { ...state, pages: { ...state.pages, repos: action.payload } };\r\n                return updated;\r\n            }\r\n            default: return state;\r\n        }\r\n    }\r\n\r\n    const [state, dispatch] = useReducer<StateReducer>(stateReducer, INITIAL_STATE);\r\n\r\n    const actions: Actions = {\r\n        loading: (isLoading) => {\r\n            dispatch({ type: ActionType.LOADING, payload: isLoading })\r\n        },\r\n        select: (page) => dispatch({ type: ActionType.SELECTED, payload: page }),\r\n        fetch: (fetchType, actionType, fetchArgs) => {\r\n            dispatch({\r\n                type: ActionType.FETCH,\r\n                payload: {\r\n                    name: `${fetchType}#${Math.random() * 10000000}`,\r\n                    args: fetchArgs || [],\r\n                    stateActionType: actionType\r\n                }\r\n            })\r\n        },\r\n        dispatch: (action, payload) => {\r\n            dispatch({ type: action, payload });\r\n        }\r\n    }\r\n    return (<StateContext.Provider value={{ state, actions }}> { children} </StateContext.Provider>);\r\n};","import { useEffect, useState } from 'react';\r\nimport { FetchContext } from './FetchContext';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './fetch.css';\r\n\r\n\r\nconst FetchTest = () => {\r\n    const [retry, setRetry] = useState(0);\r\n    const [loadingState, setLoadingState] = useState<any>({\r\n        isLoading: true,\r\n        error: null\r\n    })\r\n    const onRetry = () => setRetry(prev => prev + 1);\r\n    useEffect(() => {\r\n        setLoadingState({ isLoading: true, error: null });\r\n        setTimeout(() => {\r\n            setLoadingState({ isLoading: false, error: \"Error!!!\" });\r\n        }, 5000);\r\n    }, [retry]);\r\n    return (<Fetch isLoading={loadingState.isLoading} error={loadingState.error} onRetry={onRetry} onCancel ={() => {}}></Fetch>)\r\n}\r\n\r\nexport { FetchTest };\r\n\r\nconst Error = ({ error, onRetry, onClose } : any) => (\r\n    <div className=\"error-box\">\r\n        <svg onClick={onClose} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n        <p>{error}</p>\r\n        <a onClick={onRetry}>Retry</a>\r\n    </div>\r\n);\r\n\r\nconst Spinner = () => (<div className=\"loading-spinner\" />);\r\n\r\nexport default function Fetch({ isLoading, error, onRetry }: FetchContext) {\r\n    const [showMessage, setShowMessage] = useState(!isLoading && (error !== null));\r\n    const onRetryAfterAnim = () => setShowMessage(false);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setOpen(!isLoading && error != null)\r\n    }, [isLoading, error])\r\n    \r\n    return (\r\n        <div className=\"fetch-container\">\r\n            {isLoading && <Spinner />}\r\n            {open && <Error error={error} onRetry={onRetry} onClose={() => setOpen(false)} />}\r\n            {/* <CSSTransition in={isLoading}\r\n                timeout={3000}\r\n                unmountOnExit\r\n                onExited={() => setShowMessage(error !== null)}\r\n                classNames=\"loading-fade\">\r\n                <Spinner />\r\n            </CSSTransition>\r\n            {(error!=null) && <CSSTransition\r\n                in={showMessage}\r\n                timeout={3000}\r\n                unmountOnExit\r\n                onExited={onRetry}\r\n                classNames=\"fade\">\r\n                <Error error={error} onRetry={onRetryAfterAnim} />\r\n            </CSSTransition>} */}\r\n        </div>\r\n    )\r\n}\r\n","import { Provider } from \"../state/State\";\r\n\r\nexport interface FetchResult {\r\n    request: Promise<Object>;\r\n    cancel: CancelHandler;\r\n}\r\n\r\nexport type CancelHandler = () => void;\r\n\r\nexport type FetchRequest = (path: String) => FetchResult\r\nexport type ProviderFetchRequest = (provider: Provider) => FetchResult\r\n\r\nexport type FetchTypes = 'ping' | 'user' | 'assignments' | 'commits' | 'repos'\r\n\r\nexport type FetchService = { [key: string]: ProviderFetchRequest | (() => FetchResult) }\r\n\r\n\r\n//TODO: reactive the real base API\r\nconst BASE_API = 'https://my-git-feed.herokuapp.com';\r\n//const BASE_API = 'http://localhost:8080';\r\n\r\nconst fakeServer: { [key: string]: () => Object } = {\r\n    '/check/ping': () => ({}),\r\n\r\n    '/api/github/me': () => ({\r\n        name: \"criske\",\r\n        avatar: \"https://avatars.githubusercontent.com/u/10284893?v=4\",\r\n        url: \"https://github.com/criske\",\r\n        type: \"User\",\r\n        provider: \"Github\"\r\n    }),\r\n    '/api/gitlab/me': () => { throw new Error(\"Gitlab profile not found\") },\r\n    '/api/bitbucket/me': () => { throw new Error(\"Bitbucket profile not found\") },\r\n\r\n    '/api/github/assignments': () => ({ assignments: \"These are Github assignments\" }),\r\n    '/api/gitlab/assignments': () => { throw new Error(\"Gitlab provider not found\") },\r\n    '/api/bitbucket/assignments': () => { throw new Error(\"Bitbucket provider not found\") },\r\n\r\n\r\n    '/api/github/commits': () => ({ commits: \"These are Github commits\" }),\r\n    '/api/gitlab/commits': () => { throw new Error(\"Gitlab provider not found\") },\r\n    '/api/bitbucket/commits': () => { throw new Error(\"Bitbucket provider not found\") },\r\n\r\n    '/api/github/repos': () => ({ repos: \"These are Github repos\" }),\r\n    '/api/gitlab/repos': () => { throw new Error(\"Gitlab provider not found\") },\r\n    '/api/bitbucket/repos': () => { throw new Error(\"Bitbucket provider not found\") },\r\n}\r\n\r\n\r\nconst jsonFetch: (path: String) => FetchResult = (path) => {\r\n    const controller = new AbortController();\r\n    const signal = controller.signal;\r\n    const request = fetch(`${BASE_API}${path}`, {\r\n        signal,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(r => {\r\n        if (!r.ok) {\r\n            return r.json().then((e) => {\r\n                return Promise.reject({ message: e.error });\r\n            });\r\n        } else {\r\n            return r.json()\r\n        }\r\n\r\n    })\r\n        .catch((e) => {\r\n            return Promise.reject(e.message)\r\n        });\r\n    const cancel = () => {\r\n        try {\r\n            controller.abort();\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    // let id: any;\r\n    // const cancel = () => { clearTimeout(id) }\r\n    // const request = new Promise<object>((resolve, reject) => {\r\n    //     id = setTimeout(() => {\r\n    //         try {\r\n    //             const response: object = fakeServer[path.toLowerCase()]();\r\n    //             resolve(response);\r\n    //         } catch (error) {\r\n    //             reject(error.message);\r\n    //         }\r\n    //     }, 1000);\r\n    // });\r\n    return { request, cancel };\r\n}\r\n\r\n\r\nconst service: FetchService = {\r\n    ping: () => jsonFetch('/check/ping'),\r\n    user: (provider: Provider) => jsonFetch(`/api/${provider}/me`),\r\n    assignments: (provider: Provider) => jsonFetch(`/api/${provider}/assignments`),\r\n    commits: (provider: Provider) => jsonFetch(`/api/${provider}/commits`),\r\n    repos: (provider: Provider) => jsonFetch(`/api/${provider}/repos`)\r\n}\r\nexport default service","import React, { createContext, useContext, useEffect, useState } from \"react\"\r\nimport { ActionType } from \"../state/State\";\r\nimport { StateContext } from \"../state/StateContext\";\r\nimport service, { CancelHandler, FetchResult } from \"./../service/MyGitFeedService\";\r\n\r\n\r\nexport interface FetchContext {\r\n    isLoading: boolean;\r\n    error: String | null;\r\n    onRetry: () => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const FetchContext = createContext<FetchContext>({\r\n    isLoading: false,\r\n    error: null,\r\n    onRetry: () => { },\r\n    onCancel: () => { }\r\n});\r\n\r\n\r\nexport const FetchProvider: React.FC = ({ children }) => {\r\n\r\n    const { state, actions } = useContext<StateContext>(StateContext);\r\n\r\n    const [retryCount, setRetryCount] = useState(0);\r\n    const [cancelHandler, setCancelHandler] = useState<CancelHandler>(() => { });\r\n    const [err, setErr] = useState<String | null>(null);\r\n\r\n    const onRetry = () => { setRetryCount(retryCount + 1); }\r\n    const onCancel = () => {\r\n        cancelHandler();\r\n        actions.loading(false);\r\n        setErr(\"Canceled\");\r\n    }\r\n\r\n    const fetchCallNameHashed = state.fetch.call.name\r\n\r\n    useEffect(() => {\r\n        if (fetchCallNameHashed != null) {\r\n            const fetchCallName = fetchCallNameHashed.split('#')[0]; //remove the hash part\r\n            cancelHandler?.call(null);\r\n            actions.loading(true);\r\n            setErr(null);\r\n            const remoteCall: FetchResult = service[fetchCallName]\r\n                .call<null, any, FetchResult>(null, state.fetch.call.args);\r\n            remoteCall\r\n                .request\r\n                .then((result) => {\r\n                    const actionDispatchName: ActionType = state.fetch.call.stateActionType;\r\n                    actions.dispatch(actionDispatchName, result);\r\n                })\r\n                .catch(setErr)\r\n                .finally(() => actions.loading(false));\r\n            setCancelHandler(() => remoteCall.cancel)\r\n        }\r\n    }, [retryCount, fetchCallNameHashed]);\r\n\r\n    const context: FetchContext = {\r\n        isLoading: state.fetch.loading,\r\n        error: err,\r\n        onRetry: onRetry,\r\n        onCancel: onCancel\r\n    }\r\n    return (<FetchContext.Provider value={context}> { children} </FetchContext.Provider>);\r\n}","import { useContext } from \"react\"\r\nimport Fetch from \"./Fetch\";\r\nimport { FetchContext } from \"./FetchContext\";\r\n\r\nexport default function FetchController() {\r\n    const fetchContext = useContext(FetchContext);\r\n    return (<Fetch {...fetchContext} />);\r\n}","import { Fragment } from \"react\";\r\nimport { BrowserRouter, Link } from \"react-router-dom\";\r\nimport './navBar.css'\r\nimport { NavBarProps } from \"./NavBarProps\";\r\n\r\nexport default function NavBar({ hasRounter , provider, onSelect } : NavBarProps) {\r\n    const RouterWrap = hasRounter ? BrowserRouter : Fragment;\r\n    const handleChange = (e: any) => {\r\n        onSelect(e.target.value);\r\n    }\r\n    return (\r\n        <RouterWrap>\r\n            <nav>\r\n                <div className=\"user\">\r\n                    {provider.user.avatar ?\r\n                        <img src={provider.user.avatar} /> : <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" stroke=\"white\" strokeLinejoin=\"round\" strokeWidth=\"1\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>}\r\n                    <div className=\"provider\">{provider.name}</div>\r\n                    <a href={provider.user.link}>{provider.user.name}</a>\r\n                </div>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/assignments\">Assignments</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/repos\">Repos</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/commits\">Commits</Link>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"providers\">\r\n                    <select value={provider.name} onChange={handleChange}>\r\n                        <option value=\"Github\">Github</option>\r\n                        <option value=\"Gitlab\">Gitlab</option>\r\n                        <option value=\"Bitbucket\">Bitbucket</option>\r\n                    </select>\r\n                </div>\r\n            </nav>\r\n        </RouterWrap>\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nexport default function NavBarController() {\r\n    const { state, actions } = useContext(StateContext);\r\n    const [provider, setProvider] = useState(state.provider.name);\r\n    useEffect(() => {\r\n        actions.fetch(\"user\", ActionType.USER, [provider]);\r\n    }, [provider])\r\n    return (<NavBar provider={state.provider} onSelect={setProvider} hasRounter={false} />)\r\n}\r\n\r\nNavBarController.defaultProps = {\r\n    hasRounter: false,\r\n}","import { AssignmentType } from \"./AssignmentType\";\r\n\r\nexport default function Assignment(assignment: AssignmentType){\r\n    return(\r\n        <div className=\"card assignment\">{assignment.title}</div>\r\n    );\r\n}","import { AssignmentType } from './AssignmentType'\r\nimport Assignment from './Assignment';\r\n\r\nexport default function Assignments({ assignments }: { assignments: AssignmentType[] }) {\r\n    return (<div>\r\n        <h2>Assignments</h2>\r\n        <div className=\"grid-container\">\r\n            {assignments.map((a: AssignmentType, i: number) => <Assignment key={i} {...a} />)}\r\n        </div>\r\n    </div>)\r\n}","export function formatDate(dateStr: string): string {\r\n    return new Date(dateStr).toLocaleString();\r\n}\r\n","import { CommitType } from \"./CommitType\";\r\nimport { formatDate } from '../../utils';\r\n\r\nexport default function Commit(commit: CommitType) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div>\r\n                <div>{commit.repo.name}</div>\r\n                <div> {commit.sha} </div>\r\n                <div> {formatDate(commit.date)}</div>\r\n            </div>\r\n            <div>{commit.message || \"No message\"}</div>\r\n        </div>\r\n    )\r\n}","import Commit from './Commit'\r\nimport { CommitType } from './CommitType';\r\n\r\nexport default function Commits({ commits }: {commits : CommitType[]}) {\r\n    return (<div>\r\n        <h2>Commits</h2>\r\n        <div className=\"grid-container\">\r\n            {commits.map((c: CommitType, i: number) => <Commit key={c.sha} {...c} />)}\r\n        </div>\r\n    </div>)\r\n}","const Home = () => {\r\n    return (\r\n        <div>Home</div>\r\n    )\r\n}\r\nexport default Home","import { useMemo } from 'react';\r\nimport { formatDate } from '../../utils';\r\nimport './repos.css';\r\nimport { RepoType } from './RepoType';\r\n\r\nexport default function Repo(repo: RepoType) {\r\n    const createdAt: String = useMemo<String>(() => formatDate(repo.createdAt), [repo.createdAt]);\r\n    const updatedAt: String = useMemo(() => formatDate(repo.updatedAt), [repo.updatedAt])\r\n    return (\r\n        <div className=\"card repo\">\r\n            <div>\r\n                <a href={repo.url}>{repo.name}</a>\r\n                <div>{repo.language}</div>\r\n                <div>{repo.stars}</div>\r\n            </div>\r\n            <div>{repo.description || \"No description\"}</div>\r\n            <div>\r\n                <div>Created: {createdAt}</div>\r\n                <div>Updated: {updatedAt}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import Repo from './Repo';\r\nimport './repos.css';\r\nimport { RepoType } from './RepoType';\r\n\r\nexport default function Repos({ repos }: { repos: RepoType[] }) {\r\n    return (\r\n        <div>\r\n            <h2>Owned repositories</h2>\r\n            <div className=\"grid-container\">{repos.map((r: RepoType) => <Repo key={r.name} {...r} />)}</div>\r\n        </div>\r\n\r\n    );\r\n}","import { Route, Switch } from \"react-router\";\r\nimport AssignmentsController from \"../assignments/AssignmentsController\";\r\nimport CommitsController from \"../commits/CommitsController\";\r\nimport Home from \"../home/Home\";\r\nimport ReposController from \"../repos/ReposController\";\r\n\r\nconst routes: any = [\r\n    {\r\n        path: \"/\",\r\n        component: Home\r\n    },\r\n    {\r\n        path: \"/commits\",\r\n        component: CommitsController\r\n    },\r\n    {\r\n        path: \"/repos\",\r\n        component: ReposController\r\n    },\r\n    {\r\n        path: \"/assignments\",\r\n        component: AssignmentsController\r\n    }\r\n]\r\n\r\nexport default function NavContent() {\r\n    return (<Switch>\r\n        {routes.map((route: any, i: number) => (\r\n            <Route\r\n                exact\r\n                key={i}\r\n                path={route.path}\r\n                render={props => (\r\n                    <route.component {...props} routes={route.routes} />\r\n                )}\r\n            />\r\n        ))}\r\n    </Switch>)\r\n}\r\n","import { useContext, useEffect } from \"react\"\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport { History } from 'history';\r\nimport { CommitType } from \"./CommitType\";\r\nimport Commits from \"./Commits\";\r\n\r\nexport default function CommitsController({ location }: History) {\r\n    const { state, actions } = useContext(StateContext);\r\n    useEffect(() => {\r\n        actions.fetch(\"commits\", ActionType.COMMITS, [state.provider.name])\r\n    }, [location.key, state.provider.name]);\r\n    const commits: CommitType[] = (state.pages.commits.entries || []).map((c: any) => ({\r\n        date: c.date,\r\n        sha: c.sha,\r\n        url: c.url,\r\n        message: c.message,\r\n        repo: {\r\n            name: c.repo.fullName,\r\n            url: c.repo.url\r\n        }\r\n    }))\r\n    return (<Commits commits={commits} />)\r\n}","import { useContext, useEffect } from \"react\"\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport { History } from 'history';\r\nimport { RepoType } from \"./RepoType\";\r\nimport Repos from \"./Repos\";\r\n\r\nexport default function ReposController({ location }: History) {\r\n    const { state, actions } = useContext(StateContext);\r\n    useEffect(() => {\r\n        actions.fetch(\"repos\", ActionType.REPOS, [state.provider.name])\r\n    }, [location.key, state.provider.name])\r\n    const entries = state.pages.repos.entries || [];\r\n    const repos: RepoType[] = entries.map((r: any) => ({\r\n        name: r.simple.name,\r\n        url: r.simple.url,\r\n        language: r.language,\r\n        description: r.description === null ? undefined : r.description,\r\n        organization: r.organization === null ? undefined : r.organization,\r\n        createdAt: r.createdAt,\r\n        updatedAt: r.updatedAt,\r\n        stars: r.stars,\r\n    }));\r\n    return (<Repos repos = {repos}></Repos>);\r\n}","import { useContext, useEffect } from \"react\"\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\"\r\nimport { History } from 'history';\r\nimport { AssignmentType } from \"./AssignmentType\";\r\nimport Assignments from \"./Assignments\";\r\n\r\nexport default function AssignmentsController({ location }: History) {\r\n    const { state, actions } = useContext(StateContext);\r\n    useEffect(() => {\r\n        actions.fetch(\"assignments\", ActionType.ASSIGNMENTS, [state.provider.name]);\r\n    }, [location.key, state.provider.name]);\r\n    const assignments: AssignmentType[] = (state.pages.assignments.entries || []).map((a: any) => ({\r\n        title: a.title,\r\n        body: a.body,\r\n        repo: {\r\n            name: a.repo.fullName,\r\n            url: a.repo.url\r\n        },\r\n        author: {\r\n            name: a.author.name,\r\n            avatar: a.author.avatar,\r\n            url: a.author.url\r\n        }\r\n    }))\r\n    return (<Assignments assignments={assignments} />)\r\n}","import { BrowserRouter } from \"react-router-dom\";\r\nimport FetchController from \"./FetchController\";\r\nimport NavBarController from \"./nav/NavBarController\";\r\nimport NavContent from \"./nav/NavContent\";\r\nimport './main.css'\r\n\r\nexport default function Main() {\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"container\">\r\n                <NavBarController/>\r\n                <div className=\"nav-content\">\r\n                    <NavContent />\r\n                </div>\r\n                <FetchController />\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}","import { FetchContext } from '../FetchContext'\r\nimport './splash.css'\r\n\r\nexport default function Splash({ isLoading, error, onRetry, onCancel } : FetchContext) {\r\n    return (\r\n        <div className=\"splash-container\">\r\n            { (isLoading) ?\r\n                <>\r\n                    <h1>Waking up the server</h1>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" />\r\n                    </svg>\r\n                    <button onClick={onCancel}>Cancel</button>\r\n                </>\r\n                : <div>{error} <button onClick={onRetry}>Retry</button> </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nSplash.defaultProps = {\r\n    onCancel: () => { },\r\n    onRetry: () => { },\r\n    error: null,\r\n    isLoading: false,\r\n}","import { useContext, useEffect } from \"react\";\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport { FetchContext } from \"../FetchContext\";\r\nimport Splash from \"./Splash\";\r\n\r\nexport default function SplashController() {\r\n    const { actions } = useContext<StateContext>(StateContext);\r\n    const fetchContext = useContext(FetchContext)\r\n    useEffect(() => {\r\n        actions.fetch(\"ping\", ActionType.READY);\r\n    }, []);\r\n    return (<Splash {...fetchContext} />);\r\n}","import { useContext } from \"react\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport Main from \"../Main\";\r\nimport SplashController from \"./SplashController\";\r\n\r\nexport default function StartUp() {\r\n    const { state } = useContext(StateContext);\r\n    return (\r\n        <>\r\n            {\r\n                state.ready ? <Main /> : <SplashController/>\r\n            }\r\n        </>\r\n    );\r\n}","import { StateProvider } from './state/StateContext';\r\nimport StartUp from './components/startup/StartUp';\r\nimport { FetchProvider } from './components/FetchContext';\r\nfunction App() {\r\n    return (\r\n        <StateProvider>\r\n            <FetchProvider>\r\n                <StartUp />\r\n            </FetchProvider>\r\n        </StateProvider>\r\n    );\r\n}\r\n\r\nexport default App;","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n        <App />\r\n    // </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}