{"version":3,"sources":["state/State.ts","state/StateContext.tsx","components/Fetch.tsx","service/MyGitFeedService.ts","components/misc/select/SelectType.tsx","components/FetchContext.tsx","components/FetchController.tsx","components/misc/select/Select.tsx","components/nav/NavBar.tsx","components/nav/NavBarController.tsx","components/misc/card/CardHeader.tsx","components/misc/card/Card.tsx","components/assignments/Assignment.tsx","components/misc/heading/Heading.tsx","components/assignments/Assignments.tsx","utils/index.ts","components/commits/Commit.tsx","components/commits/Commits.tsx","components/about/index.tsx","components/misc/NotFound.tsx","components/misc/UnderConstruction.tsx","components/repos/Repo.tsx","components/repos/Repos.tsx","components/nav/NavContent.tsx","components/home/Home.tsx","components/commits/CommitsController.tsx","components/repos/ReposController.tsx","components/assignments/AssignmentsController.tsx","components/footer/index.tsx","components/Main.tsx","components/startup/Splash.tsx","components/startup/SplashController.tsx","components/startup/StartUp.tsx","App.tsx","index.tsx"],"names":["ActionType","Pages","INITIAL_STATE","fetch","loading","call","name","args","stateActionType","NONE","ready","provider","user","avatar","link","pages","selected","home","assignments","paging","current","max","entries","commits","repos","StateContext","createContext","state","actions","select","dispatch","updatePaging","payloadPaging","statePaging","last","first","prev","StateProvider","children","useReducer","action","type","READY","LOADING","payload","FETCH","USER","SELECTED","ASSIGNMENTS","COMMITS","REPOS","isLoading","page","fetchType","actionType","fetchArgs","Math","random","Provider","value","Error","error","onRetry","onClose","className","onClick","xmlns","viewBox","fill","fillRule","d","clipRule","Spinner","Fetch","useState","open","setOpen","useEffect","SelectSection","jsonFetch","path","controller","AbortController","signal","request","headers","then","r","ok","json","e","Promise","reject","message","catch","cancel","abort","console","service","ping","FetchContext","onCancel","FetchProvider","useContext","retryCount","setRetryCount","cancelHandler","setCancelHandler","err","setErr","fetchCallNameHashed","fetchCallName","split","remoteCall","apply","result","actionDispatchName","finally","context","FetchController","fetchContext","MenuItem","item","section","renderer","onSelect","preventDefault","Menu","items","map","index","MENU","Header","props","HEAD","SimpleSelectRenderer","Select","visible","setState","ref","useRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","length","tabIndex","NavBar","hasRounter","RouterWrap","BrowserRouter","Fragment","check","id","htmlFor","src","stroke","strokeLinecap","strokeLinejoin","strokeWidth","href","to","checked","NavBarController","refresh","setProvider","defaultProps","CardHeader","title","subtitle","Card","divider","hideDivider","header","body","footer","Assignment","assignment","md","useMemo","MarkDownIt","htmlBody","render","url","dangerouslySetInnerHTML","__html","Heading","heading","showPaging","filter","Assignments","a","i","formatDate","dateStr","Date","toLocaleString","Commit","commit","repo","sha","date","Commits","c","About","NotFound","UnderConstruction","Stars","stars","stroke-linecap","stroke-linejoin","stroke-width","Language","language","Repo","createdAt","updatedAt","description","Repos","routes","component","location","setPage","key","fullName","simple","undefined","organization","filterPage","setFilterPage","author","filtering","NavContent","route","exact","Footer","year","getFullYear","yearOutput","startYear","toString","Main","Splash","SplashController","StartUp","App","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.a8256f4a.chunk.js","sourcesContent":["export enum ActionType {\r\n    LOADING = 'loading',\r\n    FETCH = 'fetch',\r\n    USER = 'user',\r\n    SELECTED = 'selected',\r\n    ASSIGNMENTS = 'assignments',\r\n    COMMITS = 'commits',\r\n    REPOS = 'repos',\r\n    READY = 'ready',\r\n    NONE = \"\"\r\n}\r\n\r\nexport interface Action {\r\n    type: ActionType;\r\n    payload?: any;\r\n}\r\n\r\n\r\nexport interface FetchState {\r\n    readonly loading: boolean;\r\n    readonly call: FetchCallState;\r\n}\r\n\r\nexport interface FetchCallState {\r\n    readonly name?: string | null;\r\n    args: ReadonlyArray<string>;\r\n    readonly stateActionType: ActionType;\r\n}\r\n\r\nexport interface ProviderState {\r\n    readonly name: Provider;\r\n    readonly user: {\r\n        name: string;\r\n        avatar: string | null;\r\n        link: string,\r\n        provider: Provider\r\n    }\r\n}\r\n\r\nexport interface PagesState {\r\n    readonly selected: Pages;\r\n    readonly home: Object;\r\n    readonly assignments: any;\r\n    readonly commits: any;\r\n    readonly repos: any\r\n}\r\n\r\nexport interface State {\r\n    readonly ready: boolean;\r\n    readonly fetch: FetchState;\r\n    readonly provider: ProviderState;\r\n    readonly pages: PagesState;\r\n}\r\n\r\nexport type Provider = 'Github' | 'Gitlab' | 'Bitbucket' | 'github' | 'gitlab' | 'bitbucket';\r\n\r\nexport enum Pages {\r\n    home,\r\n    assignments,\r\n    commits,\r\n    repos,\r\n}\r\n\r\nexport const INITIAL_STATE: State = {\r\n    fetch: {\r\n        loading: false,\r\n        call: {\r\n            name: null,\r\n            args: [],\r\n            stateActionType: ActionType.NONE\r\n        }\r\n    },\r\n    ready: false,\r\n    provider: {\r\n        name: \"Github\",\r\n        user: {\r\n            name: '',\r\n            avatar: null,\r\n            link: '',\r\n            provider: \"Github\"\r\n        },\r\n    },\r\n    pages: {\r\n        selected: Pages.home,\r\n        home: {},\r\n        assignments: {\r\n            paging: { current: 1, max: 1 },\r\n            entries: []\r\n        },\r\n        commits: {\r\n            paging: { current: 1, max: 1 },\r\n            entries: []\r\n        },\r\n        repos: {\r\n            paging: { current: 1, max: 1 },\r\n            entries: []\r\n        }\r\n    }\r\n}\r\n\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { FetchTypes } from '../service/MyGitFeedService';\r\nimport { Action, ActionType, INITIAL_STATE, State, Pages } from './State';\r\n\r\ntype StateReducer = (state: State, action: Action) => State;\r\n\r\ninterface Actions {\r\n    loading: (isLoading: boolean) => void;\r\n    fetch: (fetchType: FetchTypes, actionType: ActionType, args?: any[]) => void;\r\n    select: (page: Pages) => void;\r\n    dispatch: (action: ActionType, payload: any) => void\r\n}\r\n\r\nexport interface StateContext {\r\n    state: State;\r\n    actions: Actions;\r\n}\r\n\r\nexport const StateContext = createContext<StateContext>({\r\n    state: INITIAL_STATE,\r\n    actions: {\r\n        loading: () => { },\r\n        fetch: () => { },\r\n        select: () => { },\r\n        dispatch: () => { }\r\n    }\r\n});\r\n\r\nfunction updatePaging(\r\n    payloadPaging: { first: number | null, prev: number | null, next: number | null, last: number | null },\r\n    statePaging: { current: number, max: number }\r\n): { current: number, max: number } {\r\n    const max: number = payloadPaging.last !== null ? payloadPaging.last : (payloadPaging.first == null) ? 1 : statePaging.max;\r\n    const current: number = payloadPaging.prev !== null ? payloadPaging.prev + 1 : 1;\r\n    return { current, max };\r\n}\r\n\r\nexport const StateProvider: React.FC = ({ children }) => {\r\n\r\n    const stateReducer: StateReducer = (state, action) => {\r\n        switch (action.type) {\r\n            case ActionType.READY: {\r\n                const updated: State = { ...state, ready: true };\r\n                return updated\r\n            }\r\n            case ActionType.LOADING: {\r\n                const updated: State = { ...state, fetch: { ...state.fetch, loading: action.payload } };\r\n                return updated;\r\n            }\r\n            case ActionType.FETCH: {\r\n                const updated: State = { ...state, fetch: { ...state.fetch, call: action.payload } };\r\n                return updated\r\n            }\r\n            case ActionType.USER: {\r\n                const updated: State = {\r\n                    ...state,\r\n                    provider: {\r\n                        name: action.payload?.provider,\r\n                        user: action.payload\r\n                    },\r\n                    pages: INITIAL_STATE.pages\r\n                }\r\n                return updated;\r\n            }\r\n            case ActionType.SELECTED: {\r\n                const updated: State = { ...state, pages: { ...state.pages, selected: action.payload } }\r\n                return updated;\r\n            }\r\n            case ActionType.ASSIGNMENTS: {\r\n                const paging = updatePaging(action.payload.paging, state.pages.assignments.paging);\r\n                const updated: State = {\r\n                    ...state, pages:{\r\n                        ...state.pages, assignments: {\r\n                            paging,\r\n                            entries: action.payload.entries || []\r\n                        }\r\n                    }\r\n                };\r\n                return updated;\r\n            }\r\n            case ActionType.COMMITS: {\r\n                const paging = updatePaging(action.payload.paging, state.pages.commits.paging);\r\n                const updated: State = {\r\n                    ...state, pages: {\r\n                        ...state.pages, commits: {\r\n                            paging,\r\n                            entries: action.payload.entries || []\r\n                        }\r\n                    }\r\n                };\r\n                return updated;\r\n            }\r\n            case ActionType.REPOS: {\r\n                const paging = updatePaging(action.payload.paging, state.pages.repos.paging);\r\n                const updated: State = {\r\n                    ...state, pages:{\r\n                        ...state.pages, repos: {\r\n                            paging,\r\n                            entries: action.payload.entries || []\r\n                        }\r\n                    }\r\n                };\r\n                return updated;\r\n            }\r\n            default: return state;\r\n        }\r\n    }\r\n\r\n    const [state, dispatch] = useReducer<StateReducer>(stateReducer, INITIAL_STATE);\r\n\r\n    const actions: Actions = {\r\n        loading: (isLoading) => {\r\n            dispatch({ type: ActionType.LOADING, payload: isLoading })\r\n        },\r\n        select: (page) => dispatch({ type: ActionType.SELECTED, payload: page }),\r\n        fetch: (fetchType, actionType, fetchArgs) => {\r\n            dispatch({\r\n                type: ActionType.FETCH,\r\n                payload: {\r\n                    name: `${fetchType}#${Math.random() * 10000000}`,\r\n                    args: fetchArgs || [],\r\n                    stateActionType: actionType\r\n                }\r\n            })\r\n        },\r\n        dispatch: (action, payload) => {\r\n            dispatch({ type: action, payload });\r\n        }\r\n    }\r\n    return (<StateContext.Provider value={{ state, actions }}> { children} </StateContext.Provider>);\r\n};","import { useEffect, useState } from 'react';\r\nimport { FetchContext } from './FetchContext';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './fetch.css';\r\n\r\n\r\nconst FetchTest = () => {\r\n    const [retry, setRetry] = useState(0);\r\n    const [loadingState, setLoadingState] = useState<any>({\r\n        isLoading: true,\r\n        error: null\r\n    })\r\n    const onRetry = () => setRetry(prev => prev + 1);\r\n    useEffect(() => {\r\n        setLoadingState({ isLoading: true, error: null });\r\n        setTimeout(() => {\r\n            setLoadingState({ isLoading: false, error: \"Error!!!\" });\r\n        }, 5000);\r\n    }, [retry]);\r\n    return (<Fetch isLoading={loadingState.isLoading} error={loadingState.error} onRetry={onRetry} onCancel ={() => {}}></Fetch>)\r\n}\r\n\r\nexport { FetchTest };\r\n\r\nconst Error = ({ error, onRetry, onClose } : any) => (\r\n    <div className=\"error-box\">\r\n        <svg onClick={onClose} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path\r\n                fillRule=\"evenodd\"\r\n                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n        </svg>\r\n        <p>{error}</p>\r\n        <a onClick={onRetry}>Retry</a>\r\n    </div>\r\n);\r\n\r\nconst Spinner = () => (<div className=\"loading-spinner\" />);\r\n\r\nexport default function Fetch({ isLoading, error, onRetry }: FetchContext) {\r\n    const [showMessage, setShowMessage] = useState(!isLoading && (error !== null));\r\n    const onRetryAfterAnim = () => setShowMessage(false);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setOpen(!isLoading && error != null)\r\n    }, [isLoading, error])\r\n    \r\n    return (\r\n        <div className=\"fetch-container\">\r\n            {isLoading && <Spinner />}\r\n            {open && <Error error={error} onRetry={onRetry} onClose={() => setOpen(false)} />}\r\n            {/* <CSSTransition in={isLoading}\r\n                timeout={3000}\r\n                unmountOnExit\r\n                onExited={() => setShowMessage(error !== null)}\r\n                classNames=\"loading-fade\">\r\n                <Spinner />\r\n            </CSSTransition>\r\n            {(error!=null) && <CSSTransition\r\n                in={showMessage}\r\n                timeout={3000}\r\n                unmountOnExit\r\n                onExited={onRetry}\r\n                classNames=\"fade\">\r\n                <Error error={error} onRetry={onRetryAfterAnim} />\r\n            </CSSTransition>} */}\r\n        </div>\r\n    )\r\n}\r\n","import { Provider } from \"../state/State\";\r\n\r\nexport interface FetchResult {\r\n    request: Promise<Object>;\r\n    cancel: CancelHandler;\r\n}\r\n\r\nexport type CancelHandler = () => void;\r\n\r\nexport type FetchRequest = (path: String) => FetchResult\r\nexport type ProviderFetchRequest = (provider: Provider, page?: number) => FetchResult\r\n\r\nexport type FetchTypes = 'ping' | 'user' | 'assignments' | 'commits' | 'repos'\r\n\r\nexport type FetchService = { [key: string]: ProviderFetchRequest | (() => FetchResult) }\r\n\r\n\r\n//TODO: reactive the real base API\r\nconst BASE_API = 'https://my-git-feed.herokuapp.com';\r\n//const BASE_API = 'http://localhost:8080';\r\n\r\nconst fakeServer: { [key: string]: () => Object } = {\r\n    '/check/ping': () => ({}),\r\n\r\n    '/api/github/me': () => ({\r\n        name: \"criske\",\r\n        avatar: \"https://avatars.githubusercontent.com/u/10284893?v=4\",\r\n        url: \"https://github.com/criske\",\r\n        type: \"User\",\r\n        provider: \"Github\"\r\n    }),\r\n    '/api/gitlab/me': () => { throw new Error(\"Gitlab profile not found\") },\r\n    '/api/bitbucket/me': () => { throw new Error(\"Bitbucket profile not found\") },\r\n\r\n    '/api/github/assignments': () => ({ assignments: \"These are Github assignments\" }),\r\n    '/api/gitlab/assignments': () => { throw new Error(\"Gitlab provider not found\") },\r\n    '/api/bitbucket/assignments': () => { throw new Error(\"Bitbucket provider not found\") },\r\n\r\n\r\n    '/api/github/commits': () => ({ commits: \"These are Github commits\" }),\r\n    '/api/gitlab/commits': () => { throw new Error(\"Gitlab provider not found\") },\r\n    '/api/bitbucket/commits': () => { throw new Error(\"Bitbucket provider not found\") },\r\n\r\n    '/api/github/repos': () => ({ repos: \"These are Github repos\" }),\r\n    '/api/gitlab/repos': () => { throw new Error(\"Gitlab provider not found\") },\r\n    '/api/bitbucket/repos': () => { throw new Error(\"Bitbucket provider not found\") },\r\n}\r\n\r\n\r\nconst jsonFetch: (path: String) => FetchResult = (path) => {\r\n    const controller = new AbortController();\r\n    const signal = controller.signal;\r\n    const request = fetch(`${BASE_API}${path}`, {\r\n        signal,\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(r => {\r\n        if (!r.ok) {\r\n            return r.json().then((e) => {\r\n                return Promise.reject({ message: e.error });\r\n            });\r\n        } else {\r\n            return r.json()\r\n        }\r\n\r\n    })\r\n        .catch((e) => {\r\n            return Promise.reject(e.message)\r\n        });\r\n    const cancel = () => {\r\n        try {\r\n            controller.abort();\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n    // let id: any;\r\n    // const cancel = () => { clearTimeout(id) }\r\n    // const request = new Promise<object>((resolve, reject) => {\r\n    //     id = setTimeout(() => {\r\n    //         try {\r\n    //             const response: object = fakeServer[path.toLowerCase()]();\r\n    //             resolve(response);\r\n    //         } catch (error) {\r\n    //             reject(error.message);\r\n    //         }\r\n    //     }, 1000);\r\n    // });\r\n    return { request, cancel };\r\n}\r\n\r\n\r\nconst service: FetchService = {\r\n    ping: () => jsonFetch('/check/ping'),\r\n    user: (provider: Provider) => jsonFetch(`/api/${provider}/me`),\r\n    assignments: (provider: Provider, page?: number, state?: string) => jsonFetch(`/api/${provider}/assignments?page=${page || 1}&state=${state || 'all'}`),\r\n    commits: (provider: Provider, page?: number) => jsonFetch(`/api/${provider}/commits?page=${page || 1}`),\r\n    repos: (provider: Provider, page?: number) => jsonFetch(`/api/${provider}/repos?page=${page || 1}`)\r\n}\r\nexport default service","import { ReactNode } from \"react\";\r\n\r\nexport interface SelectType<T> {\r\n    items: T[];\r\n    selected: T;\r\n    onSelect: (item: T) => void;\r\n    renderer?: SelectRenderer<T>\r\n}\r\n\r\nexport enum SelectSection {\r\n    HEAD, MENU\r\n}\r\n\r\nexport type SelectRenderer<T> = (item: T, section: SelectSection) => ReactNode","import React, { createContext, useContext, useEffect, useState } from \"react\"\r\nimport { ActionType } from \"../state/State\";\r\nimport { StateContext } from \"../state/StateContext\";\r\nimport service, { CancelHandler, FetchResult } from \"./../service/MyGitFeedService\";\r\n\r\n\r\nexport interface FetchContext {\r\n    isLoading: boolean;\r\n    error: String | null;\r\n    onRetry: () => void;\r\n    onCancel: () => void;\r\n}\r\n\r\nexport const FetchContext = createContext<FetchContext>({\r\n    isLoading: false,\r\n    error: null,\r\n    onRetry: () => { },\r\n    onCancel: () => { }\r\n});\r\n\r\n\r\nexport const FetchProvider: React.FC = ({ children }) => {\r\n\r\n    const { state, actions } = useContext<StateContext>(StateContext);\r\n\r\n    const [retryCount, setRetryCount] = useState(0);\r\n    const [cancelHandler, setCancelHandler] = useState<CancelHandler>(() => { });\r\n    const [err, setErr] = useState<String | null>(null);\r\n\r\n    const onRetry = () => { setRetryCount(retryCount + 1); }\r\n    const onCancel = () => {\r\n        cancelHandler();\r\n        actions.loading(false);\r\n        setErr(\"Canceled\");\r\n    }\r\n\r\n    const fetchCallNameHashed = state.fetch.call.name\r\n\r\n    useEffect(() => {\r\n        if (fetchCallNameHashed != null) {\r\n            const fetchCallName = fetchCallNameHashed.split('#')[0]; //remove the hash part\r\n            cancelHandler?.call(null);\r\n            actions.loading(true);\r\n            setErr(null);\r\n            const remoteCall: FetchResult = service[fetchCallName]\r\n                .apply<null, any, FetchResult>(null, state.fetch.call.args);\r\n            remoteCall\r\n                .request\r\n                .then((result) => {\r\n                    const actionDispatchName: ActionType = state.fetch.call.stateActionType;\r\n                    actions.dispatch(actionDispatchName, result);\r\n                })\r\n                .catch(setErr)\r\n                .finally(() => actions.loading(false));\r\n            setCancelHandler(() => remoteCall.cancel)\r\n        }\r\n    }, [retryCount, fetchCallNameHashed]);\r\n\r\n    const context: FetchContext = {\r\n        isLoading: state.fetch.loading,\r\n        error: err,\r\n        onRetry: onRetry,\r\n        onCancel: onCancel\r\n    }\r\n    return (<FetchContext.Provider value={context}> { children} </FetchContext.Provider>);\r\n}","import { useContext } from \"react\"\r\nimport Fetch from \"./Fetch\";\r\nimport { FetchContext } from \"./FetchContext\";\r\n\r\nexport default function FetchController() {\r\n    const fetchContext = useContext(FetchContext);\r\n    return (<Fetch {...fetchContext} />);\r\n}","import { SelectSection, SelectRenderer, SelectType } from \"./SelectType\";\r\nimport './select.css';\r\nimport { ReactNode, useEffect, useRef, useState } from \"react\";\r\n\r\nfunction MenuItem<T>({ item, section, renderer, onSelect }: { item: T, section: SelectSection, renderer: SelectRenderer<T>, onSelect: (item: T) => void }) {\r\n    const onClick = (e: any) => {\r\n        e.preventDefault();\r\n        onSelect(item)\r\n    };\r\n    return (\r\n        <div className=\"__select-menu-item\" onClick={onClick}>\r\n            {renderer(item, section)}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Menu<T>({ items, renderer, onSelect }: { items: T[], renderer: SelectRenderer<T>, onSelect: (item: T) => void }) {\r\n    return (\r\n        <div className=\"__select-menu-anchor\">\r\n            <div className=\"__select-menu\">\r\n                {items.map((item, index) => <MenuItem\r\n                    key={index}\r\n                    item={item}\r\n                    section={SelectSection.MENU}\r\n                    renderer={renderer}\r\n                    onSelect={onSelect}\r\n                />)}\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nfunction Header<T>(props: { item: T, renderer: SelectRenderer<T>, onSelect: (item: T) => void }) {\r\n    return (\r\n        <div className=\"__select-menu-header\">\r\n            <MenuItem {...props} section={SelectSection.HEAD} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function SimpleSelectRenderer<T>(item: T): ReactNode {\r\n    return (<div className=\"__select-simple-renderer\">{item}</div>);\r\n}\r\n\r\ninterface State<T> {\r\n    selected: T,\r\n    visible: boolean\r\n}\r\n\r\nexport default function Select<T>(select: SelectType<T>) {\r\n    const [state, setState] = useState<State<T>>({ selected: select.selected, visible: false });\r\n    const renderer: SelectRenderer<T> = select.renderer || SimpleSelectRenderer;\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    useEffect(() => {\r\n        function handleClickOutside(event: MouseEvent) {\r\n            if (ref.current && !ref.current.contains(event.target as Node)) {\r\n                setState(prev => ({ ...prev, visible: false }));\r\n            }\r\n        }\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n\r\n    return (select.items.length ?\r\n        (\r\n            <div className=\"__select-container\" ref={ref} tabIndex={0}>\r\n                <Header\r\n                    item={state.selected}\r\n                    renderer={renderer}\r\n                    onSelect={() => { setState(prev => ({ ...prev, visible: !prev.visible })); }}\r\n                />\r\n                { state.visible &&\r\n                    <Menu\r\n                        items={select.items}\r\n                        renderer={renderer}\r\n                        onSelect={(item) => {\r\n                                setState({ selected: item, visible: false });\r\n                                select.onSelect(item);\r\n                           }\r\n                        }\r\n                    />\r\n                }\r\n            </div>\r\n        ) : <></>);\r\n}","import { Fragment, useRef } from \"react\";\r\nimport { BrowserRouter, Link } from \"react-router-dom\";\r\nimport { Provider } from \"../../state/State\";\r\nimport { Select } from \"../misc/select\";\r\nimport './navBar.css'\r\nimport { NavBarProps } from \"./NavBarProps\";\r\n\r\nexport default function NavBar({ hasRounter, provider, onSelect }: NavBarProps) {\r\n    const RouterWrap = hasRounter ? BrowserRouter : Fragment;\r\n    const check = useRef<HTMLInputElement>(null);\r\n\r\n    const onSelectDecorator = (provider: Provider) => {\r\n        onSelect(provider);\r\n    }\r\n    return (\r\n        <RouterWrap>\r\n            <nav>\r\n                <input type=\"checkbox\" ref={check} className=\"menuToggle\" id=\"menuToggle\" />\r\n                <label htmlFor=\"menuToggle\">\r\n                    <div className=\"user\">\r\n                        {provider.user.avatar ?\r\n                            <img src={provider.user.avatar} /> : <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" stroke=\"white\" strokeLinejoin=\"round\" strokeWidth=\"1\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>}\r\n                        <div className=\"provider\">{provider.name}</div>\r\n                        <a href={provider.user.link}>{provider.user.name}</a>\r\n                    </div>\r\n                </label>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/\" onClick={() => { check.current!!.checked = false }}>Home</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/assignments\" onClick={() => { check.current!!.checked = false }}>Assignments</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/repos\" onClick={() => { check.current!!.checked = false }}>Repos</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/commits\" onClick={() => { check.current!!.checked = false }}>Commits</Link>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"providers\">\r\n                    <Select\r\n                        items={[\"Github\", \"Gitlab\", \"Bitbucket\"]}\r\n                        onSelect={onSelectDecorator}\r\n                        selected={provider.name}\r\n                    />\r\n                </div>\r\n            </nav>\r\n        </RouterWrap>\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\";\r\nimport { ActionType, Provider } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport NavBar from \"./NavBar\";\r\n\r\nexport default function NavBarController() {\r\n    const { state, actions } = useContext(StateContext);\r\n    const [provider, setProvider] = useState({ name: state.provider.name, refresh: 0 });\r\n    const providerRefresh = (name: Provider) => setProvider(prev => ({name: name, refresh: prev.refresh +1 }));\r\n    useEffect(() => {\r\n        actions.fetch(\"user\", ActionType.USER, [provider.name]);\r\n    }, [provider])\r\n    return (<NavBar provider={state.provider} onSelect={providerRefresh} hasRounter={false} />)\r\n}\r\n\r\nNavBarController.defaultProps = {\r\n    hasRounter: false,\r\n}","import './card.css';\r\n\r\nexport function CardHeader({ title, subtitle}: { title: string, subtitle: string }) {\r\n    return (\r\n        <div className=\"__card-header-content\">\r\n            <div className=\"__card-header-content-title\">{title}</div>\r\n            <div className=\"__card-header-content-subtitle\">{subtitle}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './card.css';\r\nimport { CardType } from './CardType';\r\nimport { CardHeader } from './CardHeader';\r\n\r\nexport default function Card(props: React.PropsWithChildren<CardType>) {\r\n    const divider = props.hideDivider ? \"\" : \"__card-header-divider\";\r\n    return (\r\n        <div className=\"__card-container\">\r\n            <div className={`__card ${props.className || ''}`}>\r\n\r\n                {(props.header || props.title || props.subtitle) && <div className={`__card-header ${divider}`}>\r\n                    {\r\n                        ((props.title || props.subtitle) && !props.header)\r\n                            ? <CardHeader title={props.title || \"\"} subtitle={props.subtitle || \"\"} />\r\n                            : props.header\r\n                    }\r\n                </div>\r\n                }\r\n                <div className=\"__card-body\">{props.body}</div>\r\n                {props.footer && <div className=\"__card-footer\">{props.footer}</div>}\r\n            </div>\r\n            {props.children}\r\n        </div>\r\n\r\n    )\r\n}","import { Card } from \"../misc/card\";\r\nimport { AssignmentType } from \"./AssignmentType\";\r\nimport MarkDownIt from 'markdown-it';\r\nimport { useMemo } from \"react\";\r\n\r\nexport default function Assignment(assignment: AssignmentType) {\r\n    const md = useMemo(() => MarkDownIt(), []);\r\n    const htmlBody = useMemo(() => {\r\n        const parsed = md.render(assignment.body);\r\n        return parsed;\r\n    }, [assignment.body]);\r\n    return (\r\n        <Card\r\n            title={assignment.title}\r\n            subtitle={assignment.url}\r\n            body={\r\n                <div dangerouslySetInnerHTML={{ __html: htmlBody }}></div>\r\n            }>\r\n        </Card>\r\n    );\r\n}","import HeadingType from \"./HeadingType\";\r\nimport './heading.css';\r\nimport { useState } from \"react\";\r\nimport { Select } from \"../select\";\r\n\r\n\r\nfunction Pages(paging: { current: number, max: number, onSelect: (page: number) => void }) {\r\n\r\n    const onClick = (page: number) => () => {\r\n        if (page >= 1 && page <= paging.max) {\r\n            paging.onSelect(page);\r\n        }\r\n    }\r\n\r\n    return (<div className=\"__heading-pages\">\r\n        <div className=\"__heading-pages-button\" onClick={onClick(1)}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\" />\r\n            </svg>\r\n        </div>\r\n        <div className=\"__heading-pages-button\" onClick={onClick(paging.current - 1)}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n        </div>\r\n        <div className=\"__heading-pages-current\">{paging.current}</div>\r\n        <div className=\"__heading-pages-button\" onClick={onClick(paging.current + 1)}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\r\n            </svg>\r\n        </div>\r\n        <div className=\"__heading-pages-button\" onClick={onClick(paging.max)}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 5l7 7-7 7M5 5l7 7-7 7\" />\r\n            </svg>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport function HeadingTest() {\r\n    const [paging, setPaging] = useState<{ current: number, max: number }>({\r\n        current: 10,\r\n        max: 100\r\n    });\r\n\r\n    const onSelect = (page: number) => {\r\n        setPaging((prev) => ({\r\n            ...prev, current: page\r\n        }));\r\n    };\r\n    return <Heading title=\"Test\" paging={{ ...paging, onSelect }}></Heading>\r\n}\r\n\r\nexport default function Heading<T>(heading: HeadingType<T>) {\r\n    const showPaging = heading.paging ? heading.paging.max > 1 : false;\r\n    return (\r\n        <div className=\"__heading-container\">\r\n            <h2>{heading.title}</h2>\r\n            <div className=\"__heading-actions\">\r\n                {heading.filter && <div className=\"__heading-filter\"><Select {...heading.filter} /></div>}\r\n                {showPaging ? heading.paging && <Pages {...heading.paging} /> : <></>}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { AssignmentType } from './AssignmentType'\r\nimport Assignment from './Assignment';\r\nimport { Heading } from '../misc/heading';\r\nimport { PagingType } from '../misc/heading/PagingType';\r\nimport { SelectType } from '../misc/select';\r\n\r\nexport default function Assignments({ assignments, paging, filter }: { assignments: AssignmentType[], paging: PagingType, filter: SelectType<string> }) {\r\n    return (<div>\r\n        <Heading title=\"Assignments\" paging={paging} filter={filter} />\r\n        <div className=\"grid-container\">\r\n            {assignments.map((a: AssignmentType, i: number) => <Assignment key={i} {...a} />)}\r\n        </div>\r\n    </div>)\r\n}","export function formatDate(dateStr: string): string {\r\n    return new Date(dateStr).toLocaleString();\r\n}\r\n\r\n","import { CommitType } from \"./CommitType\";\r\nimport { formatDate } from '../../utils';\r\nimport { Card } from \"../misc/card\";\r\nimport MarkDownIt from 'markdown-it';\r\nimport { useMemo } from \"react\";\r\n\r\nexport default function Commit(commit: CommitType) {\r\n    const md = useMemo(() => MarkDownIt(), []);\r\n    const htmlBody = useMemo(() => {\r\n        const parsed = md.render(commit.message || '');\r\n        return parsed;\r\n    }, [commit.message]);\r\n    return (\r\n        <Card\r\n            title={commit.repo.name}\r\n            subtitle={commit.sha}\r\n            body={<div dangerouslySetInnerHTML={{ __html: htmlBody }}></div>}\r\n            footer={formatDate(commit.date)}\r\n        >\r\n        </Card>\r\n    )\r\n}","import { Heading } from '../misc/heading';\r\nimport { PagingType } from '../misc/heading/PagingType';\r\nimport Commit from './Commit'\r\nimport { CommitType } from './CommitType';\r\n\r\nexport default function Commits({ commits, paging }: { commits: CommitType[], paging: PagingType }) {\r\n    return (<div>\r\n        <Heading title=\"Commits\" paging={paging} />\r\n        <div className=\"grid-container\">\r\n            {commits.map((c: CommitType, i: number) => <Commit key={c.sha} {...c} />)}\r\n        </div>\r\n    </div>)\r\n}","import './about.css';\r\n\r\nexport default function About() {\r\n\r\n    return (<div className=\"__about\">\r\n        <p>\r\n            <strong>My-Git-Feed</strong> is an app that aggregates all my activity on different git version control providers: &nbsp;\r\n            <a href=\"https://github.com/criske\" target=\"_blank\">Github</a>, <a href=\"https://bitbucket.org/cristianpela\" target=\"_blank\">Bitbucket</a> and <a href=\"https://gitlab.com/criske\" target=\"_blank\">Gitlab</a>.\r\n        </p>\r\n        <p>\r\n            In order to extract relevant data, the app uses APIs offered by these providers. This data is then processed by the app's\r\n            backed layer into a common REST API. This way, by keeping the domain logic on the backend, the front-end implementation is decoupled\r\n            and can be any of a simple webpage, native mobile app or a desktop app.\r\n            The backend layer also provides caching, leveraging <i>conditional-requests</i> imposed by providers and thus\r\n            ensuring a better response and rate limit saves.\r\n        </p>\r\n        <p>The whole project's source code can be found <a href=\"https://github.com/criske?tab=projects\">here</a>.</p>\r\n        <p>\r\n            <h3><a href=\"https://github.com/criske/my-git-feed-server\">Backend</a></h3>\r\n        </p>\r\n        <p>\r\n            The backend is written in Kotlin using Spring Framework and consists in three modules basically: the domain, implementation and presentation.\r\n        </p>\r\n        <p>\r\n            The domain contains all the bussiness logic, unit testable, decoupled from implementation layer(caching and networking).\r\n            Input validation is also performed here with the help of a functional validation library of mine called <a href=\"https://github.com/criske/inval-id\">inval-id</a>.\r\n            This module communicates with implementation layers via interfaces and DTOs (Data Transfer Objects).\r\n            The DTOs are simple and easly serializable to JSON an vice-versa.\r\n        </p>\r\n        <p>\r\n            The implementation, as the names says, implements the communication interfaces offered by the domain. These are mainly\r\n            the cache (Redis and Ehcache clients) and networking with git providers (Spring RestTemplate). Right know the caching is managed by Ehcache, the Redis client being disabled.\r\n        </p>\r\n        <p>\r\n            The presentation offers the REST endpoints and is representated by Spring Controllers. The Controllers communicates with domain via interfaces injected by Spring.\r\n        </p>\r\n        <p>For now only Github is fully supported, Bitbucket being in the works...</p>\r\n        <p><h3><a href=\"https://github.com/criske/my-git-feed-client\">Frontend</a></h3></p>\r\n        <p>Frontend is a SPA (Single page application) written in Typescript using React Hooks.</p>\r\n        <p>\r\n            In the future there are plans for a Android native app, multiplatform Flutter app, and a\r\n            Jetpack Compose Desktop app.\r\n        </p>\r\n        <p><h3>Hosting</h3></p>\r\n        <p>\r\n            <ul>\r\n                <li>The backend REST API is hosted on heroku: <a href=\"https://my-git-feed.herokuapp.com/\" target=\"_blank\">https://my-git-feed.herokuapp.com/</a></li>\r\n                <li>The frontend is hosted on Github pages: <a href=\"https://criske.github.io/\" target=\"_blank\">https://criske.github.io/</a></li>\r\n            </ul>\r\n        </p>\r\n    </div>)\r\n\r\n}","export default function NotFound(){\r\n    return (<h2>Not found</h2>);\r\n}\r\n\r\n","import './misc.css'\r\n\r\nexport default function UnderConstruction(){\r\n    return (<div className=\"under-construction\"><span>Page under construction...</span></div>)\r\n}","import { useMemo } from 'react';\r\nimport { formatDate } from '../../utils';\r\nimport { Card } from '../misc/card';\r\nimport './repos.css';\r\nimport { RepoType } from './RepoType';\r\n\r\nfunction Stars({ stars }: { stars: number }) {\r\n    return (<div className=\"__repo-stars\">\r\n        <svg fill=\"gold\"\r\n            stroke=\"lightgray\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\"></path></svg>\r\n        <span>{stars}</span>\r\n    </div>)\r\n}\r\n\r\nfunction Language({ language }: { language: string }) {\r\n    return (<span className=\"__repo-language-pill\">{language}</span>)\r\n}\r\n\r\nexport default function Repo(repo: RepoType) {\r\n    const createdAt: String = useMemo<String>(() => formatDate(repo.createdAt), [repo.createdAt]);\r\n    const updatedAt: String = useMemo(() => formatDate(repo.updatedAt), [repo.updatedAt])\r\n    return (\r\n        <Card\r\n            title={repo.name}\r\n            subtitle={repo.url}\r\n            body={\r\n                <div>{repo.description || \"No description\"}</div>\r\n            }\r\n            footer={\r\n                <div className=\"__repo-footer\">\r\n                    <Stars stars={repo.stars} />\r\n                </div>\r\n            }\r\n        >\r\n            <Language language={repo.language} />\r\n        </Card>\r\n    );\r\n}","import { Heading } from '../misc/heading';\r\nimport { PagingType } from '../misc/heading/PagingType';\r\nimport Repo from './Repo';\r\nimport './repos.css';\r\nimport { RepoType } from './RepoType';\r\n\r\nexport default function Repos({ repos, paging }: { repos: RepoType[], paging: PagingType }) {\r\n    return (\r\n        <div>\r\n            <Heading title=\"Owned Repositories\" paging={paging} />\r\n            <div className=\"grid-container\">{repos.map((r: RepoType) => <Repo key={r.name} {...r} />)}</div>\r\n        </div>\r\n    );\r\n}","import { Route, Switch } from \"react-router\";\r\nimport AssignmentsController from \"../assignments/AssignmentsController\";\r\nimport CommitsController from \"../commits/CommitsController\";\r\nimport Home from \"../home/Home\";\r\nimport { NotFound } from \"../misc\";\r\nimport ReposController from \"../repos/ReposController\";\r\n\r\nconst routes: any = [\r\n    {\r\n        path: \"/\",\r\n        component: Home\r\n    },\r\n    {\r\n        path: \"/commits\",\r\n        component: CommitsController\r\n    },\r\n    {\r\n        path: \"/repos\",\r\n        component: ReposController\r\n    },\r\n    {\r\n        path: \"/assignments\",\r\n        component: AssignmentsController\r\n    }\r\n]\r\n\r\nexport default function NavContent() {\r\n    return (\r\n        <Switch>\r\n            {routes.map((route: any, i: number) => (\r\n                <Route\r\n                    exact\r\n                    key={i}\r\n                    path={route.path}\r\n                    render={props => (\r\n                        <route.component {...props} routes={route.routes} />\r\n                    )}\r\n                />\r\n            ))}\r\n            <Route component={NotFound} />\r\n        </Switch>\r\n    )\r\n}\r\n","import About from '../about';\r\nimport { Heading } from '../misc/heading';\r\nimport './home.css'\r\n\r\nexport default function Home() {\r\n    return (\r\n        <>\r\n        <Heading title=\"My Git Feed\"/>\r\n        <About/>\r\n        </>\r\n    );\r\n}","import { useContext, useEffect, useState } from \"react\"\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport { History } from 'history';\r\nimport { CommitType } from \"./CommitType\";\r\nimport Commits from \"./Commits\";\r\nimport { PagingType } from \"../misc/heading/PagingType\";\r\n\r\nexport default function CommitsController({ location }: History) {\r\n    const { state, actions } = useContext(StateContext);\r\n    const [page, setPage] = useState(1);\r\n    useEffect(() => {\r\n        actions.fetch(\"commits\", ActionType.COMMITS, [state.provider.name, page]);\r\n    }, [location.key]);\r\n    useEffect(() => {\r\n        actions.fetch(\"commits\", ActionType.COMMITS, [state.provider.name, 1]);\r\n    }, [state.provider.name]);\r\n    useEffect(() => {\r\n        actions.fetch(\"commits\", ActionType.COMMITS, [state.provider.name, page]);\r\n    }, [page]);\r\n    const commits: CommitType[] = (state.pages.commits.entries || []).map((c: any) => ({\r\n        date: c.date,\r\n        sha: c.sha,\r\n        url: c.url,\r\n        message: c.message,\r\n        repo: {\r\n            name: c.repo.fullName,\r\n            url: c.repo.url\r\n        },\r\n    }))\r\n    const paging: PagingType = {\r\n        current: state.pages.commits.paging.current,\r\n        max: state.pages.commits.paging.max,\r\n        onSelect: setPage\r\n    }\r\n    return (<Commits commits={commits} paging={paging} />)\r\n}","import { useContext, useEffect, useState } from \"react\"\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport { History } from 'history';\r\nimport { RepoType } from \"./RepoType\";\r\nimport Repos from \"./Repos\";\r\nimport { PagingType } from \"../misc/heading/PagingType\";\r\n\r\nexport default function ReposController({ location }: History) {\r\n    const { state, actions } = useContext(StateContext);\r\n    const [page, setPage] = useState(1);\r\n\r\n    useEffect(() => {\r\n        actions.fetch(\"repos\", ActionType.REPOS, [state.provider.name, page])\r\n    }, [location.key, state.provider.name, page])\r\n    const entries = state.pages.repos.entries || [];\r\n    const repos: RepoType[] = entries.map((r: any) => ({\r\n        name: r.simple.name,\r\n        url: r.simple.url,\r\n        language: r.language,\r\n        description: r.description === null ? undefined : r.description,\r\n        organization: r.organization === null ? undefined : r.organization,\r\n        createdAt: r.createdAt,\r\n        updatedAt: r.updatedAt,\r\n        stars: r.stars,\r\n    }));\r\n    const paging: PagingType = {\r\n        current: state.pages.repos.paging.current,\r\n        max: state.pages.repos.paging.max,\r\n        onSelect: setPage\r\n    }\r\n    return (<Repos repos={repos} paging={paging}></Repos>);\r\n}","import { useContext, useEffect, useState } from \"react\"\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\"\r\nimport { History } from 'history';\r\nimport { AssignmentType } from \"./AssignmentType\";\r\nimport Assignments from \"./Assignments\";\r\nimport { PagingType } from \"../misc/heading/PagingType\";\r\nimport { SelectType } from \"../misc/select\";\r\n\r\nexport default function AssignmentsController({ location }: History) {\r\n    const { state, actions } = useContext(StateContext);\r\n    const [filterPage, setFilterPage] = useState({\r\n        page: 1,\r\n        filter: state.pages.assignments?.filter || \"OPEN\"\r\n    });\r\n    useEffect(() => {\r\n        actions.fetch(\"assignments\", ActionType.ASSIGNMENTS, [state.provider.name, filterPage.page, filterPage.filter]);\r\n    }, [location.key, state.provider.name, filterPage]);\r\n    const assignments: AssignmentType[] = (state.pages.assignments.entries || []).map((a: any) => ({\r\n        title: a.title,\r\n        body: a.body,\r\n        url: a.url,\r\n        repo: {\r\n            name: a.repo.fullName,\r\n            url: a.repo.url\r\n        },\r\n        author: {\r\n            name: a.author.name,\r\n            avatar: a.author.avatar,\r\n            url: a.author.url\r\n        }\r\n    }))\r\n    const paging: PagingType = {\r\n        current: state.pages.assignments.paging.current,\r\n        max: state.pages.assignments.paging.max,\r\n        onSelect: (page) => {\r\n            setFilterPage((prev) => ({ ...prev, page: page }));\r\n        }\r\n    }\r\n    const filtering: SelectType<string> = {\r\n        items: [\"ALL\", \"CLOSED\", \"OPEN\"],\r\n        selected: filterPage.filter,\r\n        onSelect: (filter) => {\r\n            setFilterPage({ page: 1, filter: filter });\r\n        }\r\n    };\r\n\r\n    return (<Assignments assignments={assignments} paging={paging} filter={filtering} />)\r\n}","import { useMemo } from 'react'\r\nimport './footer.css'\r\n\r\nexport default function Footer() {\r\n    const year = new Date().getFullYear();\r\n    const yearOutput = useMemo(() => {\r\n        const startYear = 2021;\r\n        let out: string;\r\n        if (year > startYear) {\r\n            out = `${startYear}-${year}`\r\n        } else {\r\n            out = startYear.toString()\r\n        }\r\n        return out;\r\n    }, [year]);\r\n    return (<footer><span>&copy; Copyright {yearOutput} Cristian Pela</span></footer>)\r\n}","import { BrowserRouter } from \"react-router-dom\";\r\nimport FetchController from \"./FetchController\";\r\nimport NavBarController from \"./nav/NavBarController\";\r\nimport NavContent from \"./nav/NavContent\";\r\nimport './main.css'\r\nimport Footer from \"./footer\";\r\n\r\nexport default function Main() {\r\n    return (\r\n        <BrowserRouter>\r\n            <header>\r\n                <NavBarController />\r\n            </header>\r\n            <main>\r\n                <section>\r\n                    <NavContent />\r\n                </section>\r\n                <Footer />\r\n            </main>\r\n            <FetchController />\r\n        </BrowserRouter>\r\n    )\r\n}","import About from '../about'\r\nimport { FetchContext } from '../FetchContext'\r\nimport './splash.css'\r\n\r\nexport default function Splash({ isLoading, error, onRetry, onCancel }: FetchContext) {\r\n    return (\r\n        <div className=\"splash-container\">\r\n            <div className=\"splash-waking\">\r\n                {(isLoading) ?\r\n                    <>\r\n                        <h1>Waking up the server</h1>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" />\r\n                        </svg>\r\n                        <button onClick={onCancel}>Cancel</button>\r\n                    </>\r\n                    : <div>{error} <button onClick={onRetry}>Retry</button> </div>\r\n                }\r\n            </div>\r\n            <div className=\"splash-about\">\r\n                <About />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSplash.defaultProps = {\r\n    onCancel: () => { },\r\n    onRetry: () => { },\r\n    error: null,\r\n    isLoading: false,\r\n}","import { useContext, useEffect } from \"react\";\r\nimport { ActionType } from \"../../state/State\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport { FetchContext } from \"../FetchContext\";\r\nimport Splash from \"./Splash\";\r\n\r\nexport default function SplashController() {\r\n    const { actions } = useContext<StateContext>(StateContext);\r\n    const fetchContext = useContext(FetchContext)\r\n    useEffect(() => {\r\n        actions.fetch(\"ping\", ActionType.READY);\r\n    }, []);\r\n    return (<Splash {...fetchContext} />);\r\n}","import { useContext } from \"react\";\r\nimport { StateContext } from \"../../state/StateContext\";\r\nimport Main from \"../Main\";\r\nimport SplashController from \"./SplashController\";\r\n\r\nexport default function StartUp() {\r\n    const { state } = useContext(StateContext);\r\n    return (\r\n        <>\r\n            {\r\n                state.ready ? <Main /> : <SplashController/>\r\n            }\r\n        </>\r\n    );\r\n}","import { StateProvider } from './state/StateContext';\r\nimport StartUp from './components/startup/StartUp';\r\nimport { FetchProvider } from './components/FetchContext';\r\nimport { UnderConstruction } from './components/misc/';\r\nimport { SelectType, Select } from './components/misc/select';\r\n\r\nfunction App() {\r\n    return (\r\n        <StateProvider>\r\n            <FetchProvider>\r\n                <StartUp />\r\n                <UnderConstruction/>\r\n            </FetchProvider>\r\n        </StateProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    // <React.StrictMode>\r\n        <App />\r\n    // </React.StrictMode>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}